{"name":"PresenceBuilder.java","path":"src/main/java/com/pubnub/api/builder/PresenceBuilder.java","content":{"structured":{"description":"A `PresenceBuilder` class that builds presence data for PubNub subscriptions. The class has several methods for specifying channels and channel groups to apply transformations to the presence builder. These transformations include setting connected status and adding presence data from channel groups. The resulting presence builder can be adapted using various methods to further modify the presence data.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.pubnub.api.builder.PresenceBuilder Pages: 1 -->\n<svg width=\"186pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 186.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.pubnub.api.builder.PresenceBuilder</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"178,-30 0,-30 0,0 178,0 178,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Presence</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Builder</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1pubnub_1_1api_1_1builder_1_1PubSubBuilder.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"165,-96 13,-96 13,-66 165,-66 165,-96\"/>\n<text text-anchor=\"start\" x=\"21\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Pub</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SubBuilder</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89,-55.54C89,-46.96 89,-37.61 89,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85.5,-55.8 89,-65.8 92.5,-55.8 85.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"builder\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            PresenceBuilder [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    edge [color=\"#26de81\"]\n    PubNub -> PresenceBuilder \n    PresenceBuilder -> PresenceBuilder \n}\n","items":[{"id":"e367f2de-93a5-93b1-3248-e161b1c5237e","ancestors":[],"type":"function","description":"is an extension of PubSubBuilder that allows for the modification and customization of presence data. The class has several methods for adding and modifying channels and channel groups in the presence data, as well as a `execute()` method for applying these modifications to the subscription manager.","name":"PresenceBuilder","code":"@Setter\n@Accessors(chain = true, fluent = true)\npublic class PresenceBuilder extends PubSubBuilder {\n\n    @Setter(AccessLevel.PUBLIC)\n    private boolean connected;\n\n    public PresenceBuilder(SubscriptionManager subscriptionManager) {\n        super(subscriptionManager);\n    }\n\n    \n    public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }\n\n    /**\n     * updates the presence builder with the specified channels.\n     * \n     * @param channels list of presence channels to which the `PresenceBuilder` instance\n     * will apply its transformations.\n     * \n     * @returns a PresenceBuilder instance with the specified channels.\n     */\n    public PresenceBuilder channels(List<String> channels) {\n        return (PresenceBuilder) super.channels(channels);\n    }\n\n    /**\n     * modifies a list of strings, returning a `PresenceBuilder` object to continue\n     * building presence data.\n     * \n     * @param channelGroups list of channels to be applied to the presence builder.\n     * \n     * @returns a PresenceBuilder instance.\n     */\n    public PresenceBuilder channelGroups(List<String> channelGroups) {\n        return (PresenceBuilder) super.channelGroups(channelGroups);\n    }\n\n}","location":{"start":10,"insert":10,"offset":" ","indent":0,"comment":null},"item_type":"class","length":47,"docLength":null},{"id":"e20ea979-eb35-e481-6b4d-2d3326e17ef8","ancestors":["e367f2de-93a5-93b1-3248-e161b1c5237e"],"type":"function","description":"builds a `PresenceOperation` object based on subscription and channel group information, then passes it to the `adaptPresenceBuilder` method of the `SubscriptionManager`.","params":[],"usage":{"language":"java","code":"import com.pubnub.api.builder.PresenceBuilder;\nimport com.pubnub.api.managers.SubscriptionManager;\n\n// Create a new Subscription Manager\nSubscriptionManager subscriptionManager = new SubscriptionManager();\n\n// Create a new Presence Builder using the Subscription Manager\nPresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\n\n// Set the channels and channel groups to be applied to the presence builder\npresenceBuilder.channels(Arrays.asList(\"my-channel\"));\npresenceBuilder.channelGroups(Arrays.asList(\"my-channel-group\"));\n\n// Set whether or not to connect with a specific channel group\npresenceBuilder.connected(true);\n\n// Execute the presence builder using the subscription manager\npresenceBuilder.execute();\n","description":""},"name":"execute","code":"public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }","location":{"start":22,"insert":22,"offset":" ","indent":4,"comment":null},"item_type":"method","length":9,"docLength":null}]}}}