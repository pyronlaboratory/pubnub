{"name":"PresenceBuilder.java","path":"src/main/java/com/pubnub/api/builder/PresenceBuilder.java","content":{"structured":{"description":"A `PresenceBuilder` class that extends `PubSubBuilder` and provides methods for modifying and customizing presence data. The class has several methods for adding and modifying channels and channel groups in the presence data, as well as an `execute()` method for applying these modifications to the subscription manager.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.pubnub.api.builder.PresenceBuilder Pages: 1 -->\n<svg width=\"186pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 186.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.pubnub.api.builder.PresenceBuilder</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"178,-30 0,-30 0,0 178,0 178,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Presence</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Builder</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1pubnub_1_1api_1_1builder_1_1PubSubBuilder.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"165,-96 13,-96 13,-66 165,-66 165,-96\"/>\n<text text-anchor=\"start\" x=\"21\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Pub</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SubBuilder</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89,-55.54C89,-46.96 89,-37.61 89,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85.5,-55.8 89,-65.8 92.5,-55.8 85.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"builder\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            PresenceBuilder [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    edge [color=\"#26de81\"]\n    PresenceBuilder -> PresenceBuilder \n    PubNub -> PresenceBuilder \n}\n","items":[{"id":"9916cb88-a512-ccb0-b846-9d7f0587b480","ancestors":[],"type":"function","description":"is an extension of PubSubBuilder that allows for modifying and customizing presence data. It provides methods for adding and modifying channels and channel groups in the presence data, as well as a `execute()` method for applying these modifications to the subscription manager. The class also has publicly accessible fields for connected and subscribed channels.","name":"PresenceBuilder","code":"@Setter\n@Accessors(chain = true, fluent = true)\npublic class PresenceBuilder extends PubSubBuilder {\n\n    @Setter(AccessLevel.PUBLIC)\n    private boolean connected;\n\n    public PresenceBuilder(SubscriptionManager subscriptionManager) {\n        super(subscriptionManager);\n    }\n\n    \n    /**\n     * builds a `PresenceOperation` object based on subscription and channel group\n     * information, then passes it to the `adaptPresenceBuilder` method of the `SubscriptionManager`.\n     */\n    public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }\n\n    /**\n     * returns a `PresenceBuilder` instance with the given channel list as argument to\n     * the super method, which is then used to set the channels for the presence builder.\n     * \n     * @param channels list of presence channels to which the builder will apply its operations.\n     * \n     * @returns a `PresenceBuilder` instance.\n     */\n    public PresenceBuilder channels(List<String> channels) {\n        return (PresenceBuilder) super.channels(channels);\n    }\n\n    /**\n     * takes a list of strings and returns a `PresenceBuilder` object.\n     * \n     * @param channelGroups list of channels that the `PresenceBuilder` instance will\n     * operate on.\n     * \n     * @returns a PresenceBuilder instance.\n     */\n    public PresenceBuilder channelGroups(List<String> channelGroups) {\n        return (PresenceBuilder) super.channelGroups(channelGroups);\n    }\n\n}","location":{"start":16,"insert":10,"offset":" ","indent":0,"comment":{"start":9,"end":15}},"item_type":"class","length":51,"docLength":6},{"id":"6949dcfb-9c8c-82bb-4743-5c413a9c73e1","ancestors":["9916cb88-a512-ccb0-b846-9d7f0587b480"],"type":"function","description":"builds a `PresenceOperation` object representing the current state of channel subscriptions and updates the presence builder with it.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n    // Create a new instance of the PresenceBuilder class.\n    PresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\n\n    // Add channels to the builder.\n    presenceBuilder.channels(Arrays.asList(\"channel1\", \"channel2\"));\n\n    // Add channel groups to the builder.\n    presenceBuilder.channelGroups(Arrays.asList(\"group1\", \"group2\"));\n\n    // Set connected to true.\n    presenceBuilder.connected(true);\n\n    // Execute the method on the builder instance.\n    presenceBuilder.execute();\n}\n","description":"\nIn this example, a new `PresenceBuilder` instance is created with a subscription manager argument. Channels and channel groups are added using the respective methods of the builder. Finally, the execute method is called on the builder instance to apply the modifications to the subscription manager."},"name":"execute","code":"public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }","location":{"start":32,"insert":28,"offset":" ","indent":4,"comment":{"start":27,"end":31}},"item_type":"method","length":9,"docLength":4},{"id":"e9cca695-34e8-ff9d-8440-5c296c12c949","ancestors":["9916cb88-a512-ccb0-b846-9d7f0587b480"],"type":"function","description":"returns a `PresenceBuilder` instance after taking a list of strings as input, which is then passed to the parent `super.channels()` method for further processing.","params":[{"name":"channels","type_name":"List<String>","description":"list of presence channels to be used by the `PresenceBuilder` object returned by the function.\n\nThe `List<String>` parameter represents a list of strings that contain the channels to be processed by the `PresenceBuilder`.\nThe return type is a casted instance of `PresenceBuilder`, indicating that the method calls the `super.channels()` method, passing in the `channels` list as an argument.","complex_type":true}],"returns":{"type_name":"PresenceBuilder","description":"a `PresenceBuilder` object.\n\n* The return type is `(PresenceBuilder)`, indicating that it is a builder object for creating presence objects.\n* The method is called `super.channels`, which means that it is calling the parent class's `channels` method to retrieve a list of channels.\n* The `List<String>` parameter `channels` represents the list of channels that are passed as arguments to the function.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        SubscriptionManager subscriptionManager = new SubscriptionManager();\n        PresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\n        List<String> channels = Arrays.asList(\"channel-1\", \"channel-2\");\n        presenceBuilder.channels(channels).execute();\n    }\n}\n","description":""},"name":"channels","code":"public PresenceBuilder channels(List<String> channels) {\n        return (PresenceBuilder) super.channels(channels);\n    }","location":{"start":50,"insert":42,"offset":" ","indent":4,"comment":{"start":41,"end":49}},"item_type":"method","length":3,"docLength":8},{"id":"67ffd9d0-2019-2ab3-b642-8f518aedf9f6","ancestors":["9916cb88-a512-ccb0-b846-9d7f0587b480"],"type":"function","description":"takes a list of String arguments and returns a PresenceBuilder object after calling the superclass method `channelGroups` with the provided argument.","params":[{"name":"channelGroups","type_name":"List<String>","description":"list of channels that will be used for grouping presence events.\n\n* It is a list of strings, indicating the channel groups to which the presence builder should apply its operations.\n* The elements in the list can be any combination of valid channel names or wildcards, allowing for flexible matching and application of presence operations across multiple channels.","complex_type":true}],"returns":{"type_name":"PresenceBuilder","description":"a `PresenceBuilder` instance.\n\nThe `PresenceBuilder` object is the result of calling the `super.channelGroups` method and passing in the `List<String>` parameter.\n\nThe `PresenceBuilder` class provides a way to build presence channels based on a set of criteria, such as user presence, group membership, and event triggers. It can be used to create complex presence channel rules by combining multiple conditions and actions.","complex_type":true},"usage":{"language":"java","code":"PresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\npresenceBuilder.channelGroups(\"my_channel_group1\", \"my_channel_group2\");\n","description":""},"name":"channelGroups","code":"public PresenceBuilder channelGroups(List<String> channelGroups) {\n        return (PresenceBuilder) super.channelGroups(channelGroups);\n    }","location":{"start":62,"insert":54,"offset":" ","indent":4,"comment":{"start":53,"end":61}},"item_type":"method","length":3,"docLength":8}]}}}