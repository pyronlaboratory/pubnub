{"name":"PresenceBuilder.java","path":"src/main/java/com/pubnub/api/builder/PresenceBuilder.java","content":{"structured":{"description":"A `PresenceBuilder` class that extends `PubSubBuilder` and provides additional functionality for modifying and customizing presence data. The class has public fields for connected and subscribed channels, and provides methods for adding and modifying channels and channel groups in the presence data, as well as an `execute()` method for applying these modifications to the subscription manager.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.pubnub.api.builder.PresenceBuilder Pages: 1 -->\n<svg width=\"186pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 186.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.pubnub.api.builder.PresenceBuilder</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"178,-30 0,-30 0,0 178,0 178,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Presence</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Builder</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1pubnub_1_1api_1_1builder_1_1PubSubBuilder.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"165,-96 13,-96 13,-66 165,-66 165,-96\"/>\n<text text-anchor=\"start\" x=\"21\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.pubnub.api.builder.Pub</text>\n<text text-anchor=\"middle\" x=\"89\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SubBuilder</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89,-55.54C89,-46.96 89,-37.61 89,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85.5,-55.8 89,-65.8 92.5,-55.8 85.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","diagram":"digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    subgraph cluster_0 {\n        label=\"builder\"\n        color=\"#33363A\"\n        node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"];\n        subgraph cluster_main {\n            // style=filled;\n            color=\"#00000000\"; \n            PresenceBuilder [style=filled,color=\"#26de81\",shape=rectangle, fontname=\"Courier New\"];\n            label = \"\"\n        }\n    }\n    edge [color=\"#26de81\"]\n    PresenceBuilder -> PresenceBuilder \n    PubNub -> PresenceBuilder \n}\n","items":[{"id":"5529a042-0d89-758f-204c-0f3fd86d32e2","ancestors":[],"type":"function","description":"is an extension of the PubSubBuilder class that allows for building presence channels based on user presence, group membership, and event triggers. It provides a fluent interface for creating complex presence channel rules by combining multiple conditions and actions. The class has three methods: `channelGroups`, `execute`, and `channels` which respectively return a `PresenceBuilder` instance after calling the superclass method `channelGroups` with the provided argument, execute the presence operation, and returns a `PresenceBuilder` instance after taking a list of strings as input, which is then passed to the parent `super.channels()` method for further processing.","name":"PresenceBuilder","code":"@Setter\n@Accessors(chain = true, fluent = true)\npublic class PresenceBuilder extends PubSubBuilder {\n\n    @Setter(AccessLevel.PUBLIC)\n    private boolean connected;\n\n    public PresenceBuilder(SubscriptionManager subscriptionManager) {\n        super(subscriptionManager);\n    }\n\n    \n    /**\n     * builds a `PresenceOperation` object representing the current state of channel\n     * subscriptions and updates the presence builder with it.\n     */\n    public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }\n\n    /**\n     * returns a `PresenceBuilder` instance after taking a list of strings as input, which\n     * is then passed to the parent `super.channels()` method for further processing.\n     * \n     * @param channels list of presence channels to be used by the `PresenceBuilder`\n     * object returned by the function.\n     * \n     * The `List<String>` parameter represents a list of strings that contain the channels\n     * to be processed by the `PresenceBuilder`.\n     * The return type is a casted instance of `PresenceBuilder`, indicating that the\n     * method calls the `super.channels()` method, passing in the `channels` list as an\n     * argument.\n     * \n     * @returns a `PresenceBuilder` object.\n     * \n     * \t- The return type is `(PresenceBuilder)`, indicating that it is a builder object\n     * for creating presence objects.\n     * \t- The method is called `super.channels`, which means that it is calling the parent\n     * class's `channels` method to retrieve a list of channels.\n     * \t- The `List<String>` parameter `channels` represents the list of channels that\n     * are passed as arguments to the function.\n     */\n    public PresenceBuilder channels(List<String> channels) {\n        return (PresenceBuilder) super.channels(channels);\n    }\n\n    /**\n     * takes a list of String arguments and returns a PresenceBuilder object after calling\n     * the superclass method `channelGroups` with the provided argument.\n     * \n     * @param channelGroups list of channels that will be used for grouping presence events.\n     * \n     * \t- It is a list of strings, indicating the channel groups to which the presence\n     * builder should apply its operations.\n     * \t- The elements in the list can be any combination of valid channel names or\n     * wildcards, allowing for flexible matching and application of presence operations\n     * across multiple channels.\n     * \n     * @returns a `PresenceBuilder` instance.\n     * \n     * The `PresenceBuilder` object is the result of calling the `super.channelGroups`\n     * method and passing in the `List<String>` parameter.\n     * \n     * The `PresenceBuilder` class provides a way to build presence channels based on a\n     * set of criteria, such as user presence, group membership, and event triggers. It\n     * can be used to create complex presence channel rules by combining multiple conditions\n     * and actions.\n     */\n    public PresenceBuilder channelGroups(List<String> channelGroups) {\n        return (PresenceBuilder) super.channelGroups(channelGroups);\n    }\n\n}","location":{"start":17,"insert":10,"offset":" ","indent":0,"comment":{"start":9,"end":16}},"item_type":"class","length":79,"docLength":7},{"id":"a356ae49-4adf-b6b0-d044-b3f6633220b9","ancestors":["5529a042-0d89-758f-204c-0f3fd86d32e2"],"type":"function","description":"creates a `PresenceOperation` object with subscriptions and groups, and passes it to the `adaptPresenceBuilder` method of the `SubscriptionManager`.","params":[],"usage":{"language":"java","code":"PresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\n\npresenceBuilder.channels(\"channel1\", \"channel2\");\npresenceBuilder.channelGroups(\"group1\", \"group2\");\n\n// Set the connected status to true\npresenceBuilder.connected(true);\n\n// Execute the builder with the provided presence operation\npresenceBuilder.execute();\n","description":""},"name":"execute","code":"public void execute() {\n        PresenceOperation presenceOperation = PresenceOperation.builder()\n                .channels(this.getChannelSubscriptions())\n                .channelGroups(this.getChannelGroupSubscriptions())\n                .connected(connected)\n                .build();\n\n        this.getSubscriptionManager().adaptPresenceBuilder(presenceOperation);\n    }","location":{"start":33,"insert":29,"offset":" ","indent":4,"comment":{"start":28,"end":32}},"item_type":"method","length":9,"docLength":4},{"id":"f26d7296-9fa2-7897-7340-09597286d9c2","ancestors":["5529a042-0d89-758f-204c-0f3fd86d32e2"],"type":"function","description":"takes a list of strings as input and returns a `PresenceBuilder` object, which is a superclass of `ChatMessage`.","params":[{"name":"channels","type_name":"List<String>","description":"List of strings that will be used to define the channels for which the presence builder will build the presence states.\n\nThe `channels` parameter is a list of strings.  \nThe `PresenceBuilder` object returned by the method can be used to construct a presence channel with the specified channels.","complex_type":true}],"returns":{"type_name":"PresenceBuilder","description":"a PresenceBuilder instance.\n\n* The `PresenceBuilder` object is generated through the `super.channels(channels)` method call, indicating that it inherits properties from its superclass.\n* The `channels` parameter is a list of strings representing the channels to be processed by the `PresenceBuilder`.\n* The returned `PresenceBuilder` object allows for further modifications and customization of the presence information.","complex_type":true},"usage":{"language":"java","code":"PresenceBuilder builder = new PresenceBuilder(new SubscriptionManager());\nList<String> channels = Arrays.asList(\"channel-1\", \"channel-2\");\nbuilder.channels(channels);\n// The following line adds the channels to the list of presence channels in the subscription manager\nbuilder.execute();\n","description":""},"name":"channels","code":"public PresenceBuilder channels(List<String> channels) {\n        return (PresenceBuilder) super.channels(channels);\n    }","location":{"start":65,"insert":43,"offset":" ","indent":4,"comment":{"start":42,"end":64}},"item_type":"method","length":3,"docLength":22},{"id":"2dee1a98-b5dd-b099-7943-e02783d4008c","ancestors":["5529a042-0d89-758f-204c-0f3fd86d32e2"],"type":"function","description":"takes a list of strings and returns a `PresenceBuilder` object, allowing for the manipulation of channel groups within the presence system.","params":[{"name":"channelGroups","type_name":"List<String>","description":"list of strings that will be used to define the presence channels in the PresenceBuilder object returned by the function.\n\nThe `channelGroups` parameter is of type `List<String>`, indicating that it is a list of strings.\n\nThe `super.channelGroups` call is used to delegate the processing of the `channelGroups` parameter to the superclass, indicating that this function is a subclass of another class that has a `channelGroups` method.","complex_type":true}],"returns":{"type_name":"PresenceBuilder","description":"a PresenceBuilder instance filled with the given channel groups.\n\n* The `PresenceBuilder` return type indicates that the function returns an object of the `PresenceBuilder` class, which is a builder class for creating presence objects.\n* The `(Super)` prefix on the return statement signifies that the function is overriding a method from its superclass, `Object`.\n* The `channelGroups` parameter is passed as a list of strings, indicating that it is a collection of strings representing the channel groups to be processed by the function.","complex_type":true},"usage":{"language":"java","code":"List<String> channelGroups = new ArrayList<>();\nchannelGroups.add(\"group1\");\nchannelGroups.add(\"group2\");\nPresenceBuilder presenceBuilder = new PresenceBuilder(subscriptionManager);\npresenceBuilder.channelGroups(channelGroups).execute();\n","description":"\nIn this example, the `List<String>` parameter `channelGroups` contains the names of two channel groups, \"group1\" and \"group2\". These names are used to create a presence builder object and apply modifications to the subscription manager using the `execute()` method."},"name":"channelGroups","code":"public PresenceBuilder channelGroups(List<String> channelGroups) {\n        return (PresenceBuilder) super.channelGroups(channelGroups);\n    }","location":{"start":91,"insert":69,"offset":" ","indent":4,"comment":{"start":68,"end":90}},"item_type":"method","length":3,"docLength":22}]}}}